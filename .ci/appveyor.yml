environment:
  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    # building pymor extensions fails on 2.7 currently
    #- PYTHON_VERSION: "2.7" # currently 2.7.11
      #PYTHON_ARCH: "32"
      #CONDA: "C:\\Miniconda"

    #- PYTHON_VERSION: "2.7" # currently 2.7.11
      #PYTHON_ARCH: "64"
      #CONDA: "C:\\Miniconda-x64"

    - PYTHON_VERSION: "3.4" # currently 3.4.3
      PYTHON_ARCH: "32"
      CONDA: "C:\\Miniconda3"
      MARKER: "None"

    #- PYTHON_VERSION: "3.4" # currently 3.4.3
      #PYTHON_ARCH: "64"
      #CONDA: "C:\\Miniconda3-x64"
      #MARKER: "slow"

    - PYTHON_VERSION: "3.5" # currently 3.5.1
      PYTHON_ARCH: "32"
      CONDA: "C:\\Miniconda35"
      MARKER: "None"

    #- PYTHON_VERSION: "3.5" # currently 3.5.1
      #PYTHON_ARCH: "64"
      #CONDA: "C:\\Miniconda35-x64"
      #MARKER: "slow"



install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
    - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
    - set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # hardcode a few installs that don't succeed otherwise
    - conda install numpy pip m2-unzip
    - pip install --only-binary --no-index --find-links https://pymor.github.io/wheels/ pyside
    - if [%PYTHON_VERSION%] == [3.4] ( conda remove numpy && pip install numpy && pip install https://bitbucket.org/pauloh/pyevtk/get/tip.tar.gz)

    - for /f %%i in (requirements.txt requirements-optional.txt requirements-travis.txt ) do (
                conda install %%i 1> nul 2>&1 & pip install %%i 1> nul 2>&1 & echo %%i
            )
    - curl -fsS -o gmsh.zip http://gmsh.info/bin/Windows/gmsh-2.16.0-Windows32.zip && unzip -j gmsh.zip -d %CONDA%\Scripts

build_script:
    - set PATH=%CONDA%;%CONDA%\Scripts;%PATH%
    - pip freeze
    - set PYTHONPATH=%cd%\src;%PYTHONPATH%;
    - python setup.py build_ext -i

test_script:
    - set PYTHONPATH=%cd%\src;%PYTHONPATH%;
    - py.test -r sxX

#after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  #- path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
