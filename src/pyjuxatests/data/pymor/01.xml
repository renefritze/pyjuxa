<?xml version="1.0" encoding="utf-8" ?>
<testsuite errors="0" failures="0" name="pytest" skips="0" tests="643" time="34.035">
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.006150484085083008"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.0020003318786621094"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.01734447479248047">
        <system-err>/home/r_milk01/projekte/uni/pymor/issues_tmp/src/pymortests/vectorarray.py:102: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future yield (list(np.random.randint(-len(v1), len(v1), size=count)), /home/r_milk01/projekte/uni/pymor/issues_tmp/src/pymortests/vectorarray.py:103: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future list(np.random.randint(-len(v2), len(v2), size=count)))
        </system-err>
    </testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.017839908599853516"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.02273273468017578"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.023923397064208984"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.0052144527435302734"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.0017108917236328125"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.027521371841430664"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve9]" time="0.032839298248291016"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.08892321586608887"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.027769804000854492"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.0170285701751709"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.0036313533782958984"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.025971651077270508"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.039118289947509766"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.043114423751831055"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.05723237991333008"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.005654096603393555"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="
test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.001982450485229492"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.016535043716430664"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.017894506454467773"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.029964685440063477"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.02382516860961914"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.004979848861694336"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.0017271041870117188"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.02307748794555664"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.03278541564941406"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.09078145027160645"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.03155708312988281"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.020219802856445312"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.004096031188964844"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.028162717819213867"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.03875231742858887"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.043230295181274414"></testcase>
    <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.05685162544250488"></ testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.005618572235107422"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.002260446548461914"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.018614530563354492"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.018641233444213867"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.02447342872619629"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.024556398391723633"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.0058209896087646484"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.0019352436065673828"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.02304553985595703"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.032794952392578125"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.08882021903991699"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.031296491622924805"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.017817020416259766"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.003785848617553711"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.026043415069580078"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.03907918930053711"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[
compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.04305529594421387"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.05663776397705078"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.005736351013183594"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.0020024776458740234"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.016551733016967773"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.01795482635498047"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.022602558135986328"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.023630380630493164"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.004996061325073242"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.0017049312591552734"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.023079395294189453"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.032965660095214844"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.09462332725524902"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.03150677680969238"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.019421100616455078"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.004096269607543945"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.028389453887939453"></testcase>
        <testcase classname="
src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.0425870418548584"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.042780160903930664"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.05630207061767578"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.005633115768432617"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.0021724700927734375"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.01639270782470703"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.017774581909179688"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.02269887924194336"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.023642539978027344"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.005174875259399414"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.0017418861389160156"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.023335933685302734"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.03327488899230957"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.09286713600158691"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.03139495849609375"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.01929616928100586"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-
compatible_vector_array_pair_without_reserve13]" time="0.0037446022033691406"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.02597641944885254"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.038257598876953125"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve16]" time="0.042643070220947266"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.056201934814453125"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.005633354187011719"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.001967906951904297"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.016533374786376953"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0178530216217041"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.022789716720581055"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.023424863815307617"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.004967212677001953"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.0017189979553222656"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.023195743560791016"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.03285837173461914"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.09249758720397949"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.031546831130981445"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.019443511962890625"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.0043032169342041016"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve14]" time="0.028371572494506836"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.03987622261047363"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.04254460334777832"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.05640244483947754"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.005696296691894531"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.0020024776458740234"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.016862869262695312"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.020052671432495117"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.022622346878051758"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.02356266975402832"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.005005836486816406"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.0017275810241699219"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.023149728775024414"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.03325319290161133"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_
without_reserve10]" time="0.09300589561462402"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.031426191329956055"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.017006397247314453"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0036530494689941406"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.026174545288085938"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.038182973861694336"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.04240894317626953"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.05945873260498047"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.005661487579345703"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.002003192901611328"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.016433238983154297"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.017689943313598633"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.02294158935546875"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.023699283599853516"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.005657196044921875"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.0017399787902832031"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.023042678833007812"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/
algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.03352928161621094"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.16771984100341797"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.027867555618286133"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.017242908477783203"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.003722667694091797"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.0286099910736084"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.043180227279663086"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.04712986946105957"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.0565645694732666"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.00567626953125"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.002101421356201172"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.016440629959106445"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.017775535583496094"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.022725582122802734"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.023906230926513672"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.004987955093383789"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.
0017273426055908203"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.023167133331298828"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.03297901153564453"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.0919187068939209"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.03149557113647461"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.018728971481323242"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.003842592239379883"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.026244401931762695"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.03866100311279297"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.0464320182800293"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="18" name="test_almost_equal[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.07123303413391113"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products0]" time="0.09899759292602539">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products1]" time="0.05367136001586914">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products2]" time="0.0542294979095459">
            <system-err>00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products3]" time="0.05091142654418945">
            <system-err>00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products4]" time="0.047408103942871094">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products5]" time="0.048187255859375">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products6]" time="0.0476078987121582">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products7]" time="0.0479731559753418">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products8]" time="0.04796242713928223">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products9]" time="0.04819917678833008">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products10]" time="0.04791426658630371">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products11]" time="0.04791855812072754">
            <system-err>00:06 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:06 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:06 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products12]" time="0.03898930549621582"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products13]" time="0.038518428802490234"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products14]" time="0.04648566246032715">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products15]" time="0.04675769805908203">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products16]" time="0.03712606430053711"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products17]" time="0.03707265853881836"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products18]" time="0.04644370079040527">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products19]" time="0.04735732078552246">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products20]" time="0.04859614372253418">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products21]" time="0.04817366600036621">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products22]" time="0.04792046546936035">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products23]" time="0.04835939407348633">
            <system-err>00:07 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:07 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:07 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
            </system-err>
        </testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products24]" time="0.05102849006652832"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products25]" time="0.0394892692565918"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products26]" time="0.05219721794128418"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products27]" time="0.049233198165893555"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products28]" time="0.04898405075073242"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products29]" time="0.049178361892700195"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products30]" time="0.04972720146179199"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products31]" time="0.0483860969543457"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products32]" time="0.12726926803588867"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products33]" time="0.10408353805541992"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="36" name="test_almost_equal_product[operator_with_arrays_and_products34]" time="0.04977583885192871"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve0]" time="0.018503189086914062"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve1]" time="0.01940298080444336"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve2]" time="0.11049628257751465"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve3]" time="0.1625833511352539"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve4]" time="0.027614593505859375"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve5]" time="0.00939798355102539"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve6]" time="0.009569644927978516"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve7]" time="0.1594860553741455"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="
src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve8]" time="0.9413609504699707"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve9]" time="0.18496203422546387"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve10]" time="0.029271841049194336"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve11]" time="0.3083481788635254"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve12]" time="0.04462933540344238"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve13]" time="0.17254018783569336"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve14]" time="0.2947251796722412"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve15]" time="0.4830820560455322"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[0-vector_array_without_reserve16]" time="0.5256626605987549"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve0]" time="0.012172698974609375"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve1]" time="0.012667655944824219"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve2]" time="0.1049041748046875"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve3]" time="0.16331839561462402"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve4]" time="0.027344465255737305"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve5]" time="0.009735584259033203"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve6]" time="0.009437799453735352"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve7]" time="0.15874838829040527"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve8]" time="0.9399211406707764"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve9]" time="0.18569421768188477"></testcase>
        <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve10]" time="0.029176950454711914"></ testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve11]" time="0.3215939998626709"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve12]" time="0.044225454330444336"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve13]" time="0.1722416877746582"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve14]" time="0.2972726821899414"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve15]" time="0.46913647651672363"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[1-vector_array_without_reserve16]" time="0.5286705493927002"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve0]" time="0.01189875602722168"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve1]" time="0.01390385627746582"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve2]" time="0.10892415046691895"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve3]" time="0.16999292373657227"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve4]" time="0.027367115020751953"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve5]" time="0.009793758392333984"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve6]" time="0.009799957275390625"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve7]" time="0.15787839889526367"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve8]" time="0.9392578601837158"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve9]" time="0.17960214614868164"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve10]" time="0.029193878173828125"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve11]" time="0.31090211868286133"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve12]" time="0.04438209533691406"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_
array_without_reserve13]" time="0.17247366905212402"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve14]" time="0.29694461822509766"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve15]" time="0.4793848991394043"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="59" name="test_almost_equal_self[2-vector_array_without_reserve16]" time="0.5246665477752686"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products0]" time="0.22131776809692383">
                <system-err>00:18 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:18 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:18 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:18 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products1]" time="0.2222599983215332">
                <system-err>00:18 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:18 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:18 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:18 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:18 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products2]" time="0.22288727760314941">
                <system-err>00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:19 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products3]" time="0.22480130195617676">
                <system-err>00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:19 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products4]" time="0.2147369384765625">
                <system-err>00:19 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:19 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products5]" time="0.2201073169708252">
                <system-err>00:19 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:19 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:19 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products6]" time="0.22317934036254883">
                <system-err>00:20 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:20 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products7]" time="0.22004961967468262">
                <system-err>00:20 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:20 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products8]" time="0.2146291732788086">
                <system-err>00:20 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:20 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products9]" time="0.2297508716583252">
                <system-err>00:20 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:20 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products10]" time="0.2142951488494873">
                <system-err>00:20 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:20 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:20 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products11]" time="0.22776460647583008">
                <system-err>00:21 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:21 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:21 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:21 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:21 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:21 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:21 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:21 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:21 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products12]" time="0.17876887321472168"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products13]" time="0.17966532707214355"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products14]" time="0.2190258502960205">
                <system-err>00:21 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:21 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:21 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:21 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products15]" time="0.2267301082611084">
                <system-err>00:22 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:22 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products16]" time="0.17258882522583008"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products17]" time="0.1707003116607666"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products18]" time="0.22083258628845215">
                <system-err>00:22 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:22 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products19]" time="0.22083044052124023">
                <system-err>00:22 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:22 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:22 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products20]" time="0.22570538520812988">
                <system-err>00:23 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:23 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products21]" time="0.2212684154510498">
                <system-err>00:23 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:23 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products22]" time="0.2150559425354004">
                <system-err>00:23 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:23 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products23]" time="0.2224123477935791">
                <system-err>00:23 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:23 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:23 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                </system-err>
            </testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products24]" time="0.2904050350189209"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products25]" time="0.30770134925842285"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products26]" time="0.30640649795532227"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products27]" time="0.18700265884399414"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products28]" time="0.18625760078430176"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products29]" time="0.16193437576293945"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products30]" time="0.1722092628479004"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products31]" time="0.16923069953918457"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products32]" time="0.5166246891021729"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products33]" time="0.41028761863708496"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="99" name="test_almost_equal_self_product[operator_with_arrays_and_products34]" time="0.2805051803588867"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair0]" time="0.0036411285400390625"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair1]" time="0.0010879039764404297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair2]" time="0.007272958755493164"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair3]" time="0.005587100982666016"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair4]" time="0.00612640380859375"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair5]" time="0.002836942672729492"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair6]" time="0.0016171932220458984"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[
incompatible_vector_array_pair7]" time="0.007086038589477539"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair8]" time="0.014360189437866211"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair9]" time="0.019102811813354492"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair10]" time="0.004303455352783203"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair11]" time="0.0018074512481689453"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair12]" time="0.010853052139282227"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair13]" time="0.006993532180786133"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="152" name="test_almost_equal_incompatible[incompatible_vector_array_pair14]" time="0.008374452590942383"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve0]" time="0.0024988651275634766"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve1]" time="0.0028951168060302734"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve2]" time="0.003907918930053711"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve3]" time="0.005792379379272461"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve4]" time="0.006097316741943359"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve5]" time="0.0045926570892333984"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve6]" time="0.0025212764739990234"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve7]" time="0.002617359161376953"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve8]" time="0.012212991714477539"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-
compatible_vector_array_pair_without_reserve9]" time="0.024126529693603516"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve10]" time="0.08118271827697754"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve11]" time="0.0049915313720703125"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve12]" time="0.0033140182495117188"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve13]" time="0.006407499313354492"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve14]" time="0.0056705474853515625"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve15]" time="0.005945682525634766"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve16]" time="0.009126663208007812"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair0-compatible_vector_array_pair_without_reserve17]" time="0.010247230529785156"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve0]" time="0.0027391910552978516"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve1]" time="0.0024008750915527344"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve2]" time="0.0043697357177734375"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve3]" time="0.006331920623779297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve4]" time="0.006265878677368164"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve5]" time="0.004644632339477539"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve6]" time="0.0023849010467529297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_
equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve7]" time="0.002615690231323242"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve8]" time="0.012108802795410156"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve9]" time="0.024435758590698242"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve10]" time="0.07982110977172852"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve11]" time="0.005026578903198242"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve12]" time="0.0035266876220703125"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve13]" time="0.006428718566894531"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve14]" time="0.0052947998046875"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve15]" time="0.006127357482910156"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve16]" time="0.010649681091308594"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair1-compatible_vector_array_pair_without_reserve17]" time="0.010972023010253906"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve0]" time="0.0027561187744140625"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve1]" time="0.002558469772338867"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve2]" time="0.004198789596557617"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve3]" time="0.005835294723510742"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve4]" time="0.005277395248413086"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/
basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve5]" time="0.00399017333984375"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve6]" time="0.002189159393310547"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve7]" time="0.0022966861724853516"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve8]" time="0.011548042297363281"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve9]" time="0.02438187599182129"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve10]" time="0.08142447471618652"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve11]" time="0.005934476852416992"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve12]" time="0.004169464111328125"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve13]" time="0.0071506500244140625"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve14]" time="0.005394458770751953"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve15]" time="0.006132602691650391"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve16]" time="0.010350465774536133"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair2-compatible_vector_array_pair_without_reserve17]" time="0.011121511459350586"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve0]" time="0.0027403831481933594"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve1]" time="0.0024154186248779297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve2]" time="0.004213809967041016"></testcase>
            <testcase classname="src.pymortests.
algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve3]" time="0.005519390106201172"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve4]" time="0.005788087844848633"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve5]" time="0.003831624984741211"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve6]" time="0.0021708011627197266"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve7]" time="0.0022323131561279297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve8]" time="0.011787176132202148"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve9]" time="0.024398326873779297"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve10]" time="0.0794682502746582"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve11]" time="0.004833221435546875"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve12]" time="0.004428386688232422"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve13]" time="0.0064239501953125"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve14]" time="0.005268573760986328"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve15]" time="0.006155729293823242"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve16]" time="0.010523080825805664"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair3-compatible_vector_array_pair_without_reserve17]" time="0.010984420776367188"></testcase>
            <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve0]" time="0.0027489662170410156"></ testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve1]" time="0.0025887489318847656"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve2]" time="0.004518747329711914"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve3]" time="0.006247520446777344"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve4]" time="0.00627899169921875"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve5]" time="0.004493236541748047"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve6]" time="0.0021729469299316406"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve7]" time="0.002257108688354492"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve8]" time="0.01182246208190918"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve9]" time="0.025164127349853516"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve10]" time="0.07907938957214355"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve11]" time="0.004814863204956055"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve12]" time="0.003515005111694336"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve13]" time="0.006310939788818359"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve14]" time="0.005866527557373047"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve15]" time="0.00604557991027832"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_
reserve16]" time="0.010459184646606445"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair4-compatible_vector_array_pair_without_reserve17]" time="0.011112451553344727"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve0]" time="0.0027518272399902344"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve1]" time="0.002396821975708008"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve2]" time="0.004402875900268555"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve3]" time="0.0063931941986083984"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve4]" time="0.006319284439086914"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve5]" time="0.004647254943847656"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve6]" time="0.002478361129760742"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve7]" time="0.00226593017578125"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve8]" time="0.011406660079956055"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve9]" time="0.024728775024414062"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve10]" time="0.08146810531616211"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve11]" time="0.005234718322753906"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve12]" time="0.0035185813903808594"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve13]" time="0.006427764892578125"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_
pair5-compatible_vector_array_pair_without_reserve14]" time="0.005288124084472656"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve15]" time="0.006310701370239258"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve16]" time="0.010327816009521484"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair5-compatible_vector_array_pair_without_reserve17]" time="0.010546207427978516"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve0]" time="0.0027153491973876953"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve1]" time="0.002561330795288086"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve2]" time="0.004194974899291992"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve3]" time="0.006311655044555664"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve4]" time="0.006214141845703125"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve5]" time="0.003797292709350586"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve6]" time="0.002149343490600586"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve7]" time="0.002254962921142578"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve8]" time="0.011460304260253906"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve9]" time="0.02358222007751465"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve10]" time="0.0801994800567627"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve11]" time="0.0058629512786865234"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_
equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve12]" time="0.004156589508056641"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve13]" time="0.0065746307373046875"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve14]" time="0.005218982696533203"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve15]" time="0.006098031997680664"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve16]" time="0.010402679443359375"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair6-compatible_vector_array_pair_without_reserve17]" time="0.011056900024414062"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve0]" time="0.002729177474975586"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve1]" time="0.002566814422607422"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve2]" time="0.00419306755065918"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve3]" time="0.006365776062011719"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve4]" time="0.006292819976806641"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve5]" time="0.004548549652099609"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve6]" time="0.002505064010620117"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve7]" time="0.0028433799743652344"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve8]" time="0.012152433395385742"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve9]" time="0.025165319442749023"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/
basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve10]" time="0.07764172554016113"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve11]" time="0.005457162857055664"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve12]" time="0.003355741500854492"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve13]" time="0.00629734992980957"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve14]" time="0.005353689193725586"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve15]" time="0.006061077117919922"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve16]" time="0.010101795196533203"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair7-compatible_vector_array_pair_without_reserve17]" time="0.011081457138061523"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve0]" time="0.002864360809326172"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve1]" time="0.002390146255493164"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve2]" time="0.004392147064208984"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve3]" time="0.006240129470825195"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve4]" time="0.006265163421630859"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve5]" time="0.0046617984771728516"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve6]" time="0.002523660659790039"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve7]" time="0.0021131038665771484"></testcase>
                <testcase classname="src.pymortests.
algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve8]" time="0.011473417282104492"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve9]" time="0.025333166122436523"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve10]" time="0.08028125762939453"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve11]" time="0.004830598831176758"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve12]" time="0.003543376922607422"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve13]" time="0.006933450698852539"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve14]" time="0.0052487850189208984"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve15]" time="0.006173849105834961"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve16]" time="0.010509490966796875"></testcase>
                <testcase classname="src.pymortests.algorithms.basic" file="src/pymortests/algorithms/basic.py" line="161" name="test_almost_equal_wrong_ind[compatible_vector_array_pair8-compatible_vector_array_pair_without_reserve17]" time="0.010301351547241211"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve0]" time="0.0012562274932861328"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve1]" time="0.0009992122650146484"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve2]" time="0.0011684894561767578"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve3]" time="0.07563233375549316">
                    <system-err>00:28 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:28 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve4]" time="0.017732858657836914">
                    <system-err>00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:28 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve5]" time="0.0011417865753173828"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve6]" time="0.0009500980377197266"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve7]" time="0.0013124942779541016"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve8]" time="0.1461484432220459">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve9]" time="0.020692825317382812">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve10]" time="0.0013964176177978516"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve11]" time="0.004168987274169922">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve12]" time="0.0023522377014160156">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve13]" time="0.0014920234680175781"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve14]" time="0.0031397342681884766"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve15]" time="0.2687661647796631">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[0-vector_array_without_reserve16]" time="0.14962291717529297">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve0]" time="0.0011153221130371094"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve1]" time="0.0010120868682861328"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve2]" time="0.0011959075927734375"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve3]" time="0.07588696479797363">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve4]" time="0.017907381057739258">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve5]" time="0.0009894371032714844"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve6]" time="0.0011649131774902344"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve7]" time="0.0013294219970703125"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve8]" time="0.14678025245666504">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:29 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve9]" time="0.021944522857666016">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve10]" time="0.0014414787292480469"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve11]" time="0.004246711730957031">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve12]" time="0.0024013519287109375">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:29 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve13]" time="0.0015611648559570312"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve14]" time="0.003188610076904297"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve15]" time="0.308396577835083">
                    <system-err>00:29 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[1-vector_array_without_reserve16]" time="0.15234971046447754">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve0]" time="0.0010828971862792969"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve1]" time="0.0010170936584472656"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve2]" time="0.001405954360961914"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve3]" time="0.07712531089782715">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve4]" time="0.01784801483154297">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve5]" time="0.0009870529174804688"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve6]" time="0.0009851455688476562"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve7]" time="0.0015425682067871094"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve8]" time="0.1470503807067871">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 31 again 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve9]" time="0.020618438720703125">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 3 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 4 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 5 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 6 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 7 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 8 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 9 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 10 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 11 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 12 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 13 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 14 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 15 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 16 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 17 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 18 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 19 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 20 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 21 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 22 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 23 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 24 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 25 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 26 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 27 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 28 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 29 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 30 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 31 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 32 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 33 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 34 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 35 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 36 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 37 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 38 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 39 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 40 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 41 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 42 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 43 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 44 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 45 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 46 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 47 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 48 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 49 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 50 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 51 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 52 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 53 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 54 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 55 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 56 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 57 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 58 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 59 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 60 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 61 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 62 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 63 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 64 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 65 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 66 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 67 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 68 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 69 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 70 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 71 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 72 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 73 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 74 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 75 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 76 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 77 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 78 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 79 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 80 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 81 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 82 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 83 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 84 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 85 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 86 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 87 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 88 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 89 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 90 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 91 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 92 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 93 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 94 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 95 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 96 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 97 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 98 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 99 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 100 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 101 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve10]" time="0.0014264583587646484"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve11]" time="0.004228353500366211">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve12]" time="0.0023844242095947266">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 0 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 1 of norm 0.0 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing vector 2 of norm 0.0
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve13]" time="0.0015454292297363281"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve14]" time="0.0031845569610595703"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve15]" time="0.2856607437133789">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="12" name="test_gram_schmidt[2-vector_array_without_reserve16]" time="0.14928960800170898">
                    <system-err>00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:30 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 7 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 8 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 9 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 10 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 11 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 12 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 13 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 14 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 15 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 16 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 17 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 18 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 19 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 20 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 21 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 22 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 23 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 24 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 25 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 26 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 27 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 28 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 29 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 30 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 31 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 32 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 33 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 34 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 35 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 36 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 37 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 38 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 39 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 40 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 41 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 42 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 43 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 44 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 45 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 46 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 47 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 48 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 49 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 50 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 51 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 52 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 53 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 54 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 55 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 56 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 57 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 58 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 59 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 60 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 61 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 62 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 63 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 64 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 65 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 66 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 67 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 68 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 69 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 70 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 71 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 72 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 73 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 74 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 75 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 76 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 77 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 78 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 79 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 80 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 81 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 82 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 83 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 84 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 85 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 86 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 87 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 88 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 89 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 90 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 91 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 92 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 93 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 94 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 95 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 96 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 97 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 98 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 99 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 100 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 101
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products0]" time="0.016167402267456055">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products1]" time="0.016542434692382812">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products2]" time="0.021669626235961914">
                    <system-err>00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products3]" time="0.019629240036010742">
                    <system-err>00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products4]" time="0.015273809432983398">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products5]" time="0.01679515838623047">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products6]" time="0.015308141708374023">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products7]" time="0.01653909683227539">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products8]" time="0.015475034713745117">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products9]" time="0.016542434692382812">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products10]" time="0.015266180038452148">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products11]" time="0.017218828201293945">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products12]" time="0.012853145599365234">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products13]" time="0.013429880142211914">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products14]" time="0.016800642013549805">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products15]" time="0.017635822296142578">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products16]" time="0.01147150993347168">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 1 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 2 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 1 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 2 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products17]" time="0.011365175247192383">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 1 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 2 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 1 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 2 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 3 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 4 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 6
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products18]" time="0.016873836517333984">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products19]" time="0.017674922943115234">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products20]" time="0.01813483238220215">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Removing linear dependent vector 5
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products21]" time="0.019237279891967773">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 5 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products22]" time="0.015334844589233398">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products23]" time="0.016614437103271484">
                    <system-err>00:31 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:31 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:31 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 4 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products24]" time="0.008980274200439453">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products25]" time="0.00995779037475586">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products26]" time="0.009963274002075195">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products27]" time="0.00610041618347168"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products28]" time="0.0065805912017822266">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products29]" time="0.005866289138793945">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products30]" time="0.0060846805572509766">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products31]" time="0.00584101676940918">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products32]" time="0.021494626998901367">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products33]" time="0.01604604721069336">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="26" name="test_gram_schmidt_with_product[operator_with_arrays_and_products34]" time="0.010527610778808594">
                    <system-err>00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 1 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 2 again 00:31 #x1B[1mgram_schmidt#x1B[0m: Orthonormalizing vector 3 again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve0]" time="0.0007615089416503906"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve1]" time="0.0007874965667724609"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve2]" time="0.0007636547088623047"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve3]" time="0.06457328796386719"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve4]" time="0.0005996227264404297"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve5]" time="0.0007026195526123047"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve6]" time="0.0005047321319580078"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve7]" time="0.0005323886871337891"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve8]" time="0.08007454872131348"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve9]" time="0.0007147789001464844"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve10]" time="0.0005867481231689453"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve11]" time="0.0038940906524658203"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve12]" time="0.0008456707000732422"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve13]" time="0.0005640983581542969"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve14]" time="0.0027625560760498047"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve15]" time="0.15045642852783203"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[0-vector_array_without_reserve16]" time="0.0047724246978759766"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve0]" time="0.0007498264312744141"></testcase>
                <testcase classname="
src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve1]" time="0.0005123615264892578"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve2]" time="0.0005381107330322266"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve3]" time="0.03936362266540527"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve4]" time="0.0005409717559814453"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve5]" time="0.0005276203155517578"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve6]" time="0.0007069110870361328"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve7]" time="0.0005242824554443359"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve8]" time="0.07764363288879395"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve9]" time="0.0009486675262451172"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve10]" time="0.0006480216979980469"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve11]" time="0.004086732864379883"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve12]" time="0.0006320476531982422"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve13]" time="0.0006196498870849609"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve14]" time="0.0027816295623779297"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve15]" time="0.1429734230041504"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[1-vector_array_without_reserve16]" time="0.0047550201416015625"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve0]" time="0.0005214214324951172"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve1]" time="0.0005228519439697266"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="
src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve2]" time="0.0005393028259277344"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve3]" time="0.039429664611816406"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve4]" time="0.0007188320159912109"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve5]" time="0.0005235671997070312"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve6]" time="0.0005345344543457031"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve7]" time="0.0005309581756591797"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve8]" time="0.07682251930236816"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve9]" time="0.0009429454803466797"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve10]" time="0.0008876323699951172"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve11]" time="0.003926515579223633"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve12]" time="0.0006368160247802734"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve13]" time="0.0006031990051269531"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve14]" time="0.0028100013732910156"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve15]" time="0.14064359664916992"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="40" name="test_gram_schmidt_biorth[2-vector_array_without_reserve16]" time="0.0047414302825927734"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products0]" time="0.012793540954589844">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products1]" time="0.013687849044799805">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products2]" time="0.018854856491088867">
                    <system-err>00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products3]" time="0.01635885238647461">
                    <system-err>00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products4]" time="0.012910127639770508">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products5]" time="0.013427972793579102">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products6]" time="0.012349605560302734">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products7]" time="0.013630151748657227">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products8]" time="0.012377023696899414">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products9]" time="0.013550281524658203">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products10]" time="0.012882471084594727">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products11]" time="0.01374197006225586">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products12]" time="0.010971307754516602"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products13]" time="0.01097726821899414"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products14]" time="0.01451730728149414">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products15]" time="0.014985799789428711">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products16]" time="0.007628679275512695"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products17]" time="0.00718235969543457"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products18]" time="0.014501094818115234">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products19]" time="0.01495814323425293">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products20]" time="0.016160964965820312">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products21]" time="0.0164186954498291">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[2] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[2] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products22]" time="0.012340545654296875">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products23]" time="0.013850927352905273">
                    <system-err>00:32 #x1B[1mL2ProductP1#x1B[0m: Integrate the products of the shape functions on each element 00:32 #x1B[1mL2ProductP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mL2ProductP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calulate gradients of shape functions transformed by reference map ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Calculate all local scalar products beween gradients ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Determine global dofs ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Boundary treatment ... 00:32 #x1B[1mDiffusionOperatorP1#x1B[0m: Assemble system matrix ... 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products24]" time="0.0073964595794677734">
                    <system-err>00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products25]" time="0.007512569427490234">
                    <system-err>00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products26]" time="0.007786273956298828">
                    <system-err>00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products27]" time="0.005312442779541016"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products28]" time="0.0063250064849853516"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products29]" time="0.0036323070526123047"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products30]" time="0.0036249160766601562"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products31]" time="0.003656625747680664"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products32]" time="0.01662921905517578"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products33]" time="0.0123748779296875"></testcase>
                <testcase classname="src.pymortests.algorithms.gram_schmidt" file="src/pymortests/algorithms/gram_schmidt.py" line="68" name="test_gram_schmidt_biorth_with_product[operator_with_arrays_and_products34]" time="0.008124828338623047">
                    <system-err>00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector V[1] again 00:32 #x1B[1mgram_schmidt_biorth#x1B[0m: Projecting vector W[1] again
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[1]" time="0.0016591548919677734">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[2]" time="0.0015599727630615234">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[3]" time="0.0016019344329833984">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[4]" time="0.0018298625946044922">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[5]" time="0.0015697479248046875">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[6]" time="0.0016064643859863281">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="21" name="test_newton[7]" time="0.0015876293182373047">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 0.000000e+00, Reduction: 0.000000e+00, Total Reduction: 0.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Absolute limit of 1e-15 reached. Stopping.
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="27" name="test_newton_fail" time="0.004236459732055664">
                    <system-err>00:32 #x1B[1mnewton#x1B[0m: Initial Residual: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 1: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 2: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 3: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 4: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 5: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 6: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 7: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 8: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 9: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00 00:32 #x1B[1mnewton#x1B[0m: Iteration 10: Residual: 1.000000e+00, Reduction: 1.000000e+00, Total Reduction: 1.000000e+00
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="37" name="test_ext[pod_basis_extension]" time="0.006136178970336914">
                    <system-err>00:32 #x1B[1mpod#x1B[0m: Computing Gramian (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Computing eigenvalue decomposition ... 00:32 #x1B[1mpod#x1B[0m: Computing left-singular vectors (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Checking orthonormality ... 00:32 #x1B[1mpod#x1B[0m: Computing Gramian (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Computing eigenvalue decomposition ... 00:32 #x1B[1mpod#x1B[0m: Computing left-singular vectors (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Checking orthonormality ... 00:32 #x1B[1mpod#x1B[0m: Computing Gramian (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Computing eigenvalue decomposition ... 00:32 #x1B[1mpod#x1B[0m: Computing left-singular vectors (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Checking orthonormality ... 00:32 #x1B[1mpod#x1B[0m: Computing Gramian (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Computing eigenvalue decomposition ... 00:32 #x1B[1mpod#x1B[0m: Computing left-singular vectors (1 vectors) ... 00:32 #x1B[1mpod#x1B[0m: Checking orthonormality ...
                    </system-err>
                </testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="37" name="test_ext[gram_schmidt_basis_extension]" time="0.003217935562133789"></testcase>
                <testcase classname="src.pymortests.algorithms.stuff" file="src/pymortests/algorithms/stuff.py" line="37" name="test_ext[trivial_basis_extension]" time="0.0017986297607421875"></testcase>
</testsuite>
